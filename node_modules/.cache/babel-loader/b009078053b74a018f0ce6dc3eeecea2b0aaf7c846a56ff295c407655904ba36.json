{"ast":null,"code":"\n\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"vilot\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;","map":{"version":3,"names":[],"sources":["H:/drift mark tecknology internship day 1/company website drift mark task 5/my task/my-app/src/components/ContactForm.js"],"sourcesContent":["\n\n\n\n\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"vilot\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}