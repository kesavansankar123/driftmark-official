{"ast":null,"code":"var _jsxFileName = \"H:\\\\drift mark tecknology internship day 1\\\\company website drift mark task 5\\\\my task\\\\my-app\\\\src\\\\components\\\\ContactForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContactForm() {\n  _s();\n  const initialFormState = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    isRobot: false\n  };\n  const [formData, setFormData] = useState(initialFormState);\n  const [errors, setErrors] = useState({});\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n    if (!formData.lastName.trim()) newErrors.lastName = \"Last name is required.\";\n    if (!formData.email.trim() || !/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Valid email is required.\";\n    }\n    if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n    if (!formData.isRobot) newErrors.isRobot = \"Please confirm you are not a robot.\";\n    return newErrors;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const validationErrors = validate();\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n    } else {\n      alert(\"Form submitted successfully!\");\n      setFormData(initialFormState);\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      maxWidth: \"400px\",\n      margin: \"0 auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"First Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"firstName\",\n        value: formData.firstName,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), errors.firstName && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors.firstName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Last Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lastName\",\n        value: formData.lastName,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), errors.lastName && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors.lastName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        value: formData.email,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: formData.password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"isRobot\",\n          checked: formData.isRobot,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), \"I am not a robot\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), errors.isRobot && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors.isRobot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n}\n_s(ContactForm, \"E5kRtR/11/LcURXBPJPxPHH3AwY=\");\n_c = ContactForm;\nexport default ContactForm;\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ContactForm","_s","initialFormState","firstName","lastName","email","password","isRobot","formData","setFormData","errors","setErrors","validate","newErrors","trim","test","handleSubmit","e","preventDefault","validationErrors","Object","keys","length","alert","handleChange","name","value","type","checked","target","onSubmit","style","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","color","_c","$RefreshReg$"],"sources":["H:/drift mark tecknology internship day 1/company website drift mark task 5/my task/my-app/src/components/ContactForm.js"],"sourcesContent":["\n\n\n\n\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;\n\n\n\nimport React, { useState } from \"react\";\n\nfunction ContactForm() {\n  const initialFormState = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    isRobot: false,\n  };\n\n  const [formData, setFormData] = useState(initialFormState);\n  const [errors, setErrors] = useState({});\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n    if (!formData.lastName.trim()) newErrors.lastName = \"Last name is required.\";\n    if (!formData.email.trim() || !/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Valid email is required.\";\n    }\n    if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n    if (!formData.isRobot) newErrors.isRobot = \"Please confirm you are not a robot.\";\n    return newErrors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const validationErrors = validate();\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n    } else {\n      alert(\"Form submitted successfully!\");\n      setFormData(initialFormState);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({ ...formData, [name]: type === \"checkbox\" ? checked : value });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ maxWidth: \"400px\", margin: \"0 auto\" }}>\n      {/* First Name */}\n      <div>\n        <label>First Name:</label>\n        <input\n          type=\"text\"\n          name=\"firstName\"\n          value={formData.firstName}\n          onChange={handleChange}\n        />\n        {errors.firstName && <p style={{ color: \"red\" }}>{errors.firstName}</p>}\n      </div>\n\n      {/* Last Name */}\n      <div>\n        <label>Last Name:</label>\n        <input\n          type=\"text\"\n          name=\"lastName\"\n          value={formData.lastName}\n          onChange={handleChange}\n        />\n        {errors.lastName && <p style={{ color: \"red\" }}>{errors.lastName}</p>}\n      </div>\n\n      {/* Email */}\n      <div>\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n        />\n        {errors.email && <p style={{ color: \"red\" }}>{errors.email}</p>}\n      </div>\n\n      {/* Password */}\n      <div>\n        <label>Password:</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n        />\n        {errors.password && <p style={{ color: \"red\" }}>{errors.password}</p>}\n      </div>\n\n      {/* Robot Check */}\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"isRobot\"\n            checked={formData.isRobot}\n            onChange={handleChange}\n          />\n          I am not a robot\n        </label>\n        {errors.isRobot && <p style={{ color: \"red\" }}>{errors.isRobot}</p>}\n      </div>\n\n      {/* Submit */}\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n"],"mappings":";;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,gBAAgB,GAAG;IACvBC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACX,CAAC;EAED,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACK,gBAAgB,CAAC;EAC1D,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}