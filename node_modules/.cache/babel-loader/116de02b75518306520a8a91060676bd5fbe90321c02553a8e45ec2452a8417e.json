{"ast":null,"code":"var _jsxFileName = \"H:\\\\drift mark tecknology internship day 1\\\\company website drift mark task 5\\\\my task\\\\my-app\\\\src\\\\components\\\\ContactForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"vilot\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;\n\nimport React, { useState } from \"react\";\nimport { Form, Button, Container, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\nimport \"./ContactForm.css\"; // Import custom styles for animated border\n// import Contact from \"./Contact\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContactForm() {\n  _s();\n  const initialFormState = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    message: \"\",\n    isRobot: false\n  };\n  const [formData, setFormData] = useState(initialFormState);\n  const [errors, setErrors] = useState({});\n  const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n    if (!formData.email.trim()) {\n      newErrors.email = \"Email is required.\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Enter a valid email address.\";\n    }\n    if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n    if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n    if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n    return newErrors;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const validationErrors = validate();\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n    } else {\n      setErrors({});\n      alert(\"Form submitted successfully!\");\n      setFormData(initialFormState); // Clear the input fields after submission\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [[{\n          label: \"First Name\",\n          name: \"firstName\",\n          required: true\n        }, {\n          label: \"Last Name\",\n          name: \"lastName\",\n          required: true\n        }, {\n          label: \"Email\",\n          name: \"email\",\n          required: true\n        }].map(({\n          label,\n          name,\n          required\n        }, index) => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: name,\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            style: {\n              color: \"blue\"\n            },\n            children: [label, \" \", required && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            name: name,\n            value: formData[name],\n            onChange: handleChange,\n            placeholder: `Enter ${label.toLowerCase()}`,\n            style: {\n              borderColor: errors[name] ? \"red\" : \"skyblue\",\n              borderWidth: \"2px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this), errors[name] && /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-danger\",\n            children: errors[name]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"password\",\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            style: {\n              color: \"blue\"\n            },\n            children: [\"Password \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: \"relative\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: showPassword ? \"text\" : \"password\",\n              name: \"password\",\n              value: formData.password,\n              onChange: handleChange,\n              placeholder: \"Enter password\",\n              style: {\n                borderColor: errors.password ? \"red\" : \"skyblue\",\n                borderWidth: \"2px\",\n                paddingRight: \"40px\" // Extra space for the icon\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: `bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`,\n              onClick: () => setShowPassword(!showPassword),\n              style: {\n                position: \"absolute\",\n                top: \"50%\",\n                right: \"10px\",\n                transform: \"translateY(-50%)\",\n                cursor: \"pointer\",\n                fontSize: \"1.2rem\",\n                color: \"gray\"\n              },\n              title: showPassword ? \"Hide Password\" : \"Show Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), errors.password && /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-danger\",\n            children: errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"message\",\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            style: {\n              color: \"blue\"\n            },\n            children: \"Message (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 3,\n            name: \"message\",\n            value: formData.message,\n            onChange: handleChange,\n            placeholder: \"Enter your message\",\n            style: {\n              borderColor: errors.message ? \"red\" : \"skyblue\",\n              borderWidth: \"2px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), errors.message && /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-danger\",\n            children: errors.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"robotCheck\",\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            className: \"align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: \"auto\",\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                name: \"isRobot\",\n                checked: formData.isRobot,\n                onChange: handleChange,\n                className: \"me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Form.Label, {\n                className: \"mb-0\",\n                children: \"I am not a robot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), errors.isRobot && /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-danger\",\n            children: errors.isRobot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"btn btn-primary btn-lg\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n}\n_s(ContactForm, \"wj8VEKvxJSqtfgvbtne+D03BkMg=\");\n_c = ContactForm;\nexport default ContactForm;\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["React","useState","Form","Button","Container","Row","Col","jsxDEV","_jsxDEV","ContactForm","_s","initialFormState","firstName","lastName","email","password","message","isRobot","formData","setFormData","errors","setErrors","showPassword","setShowPassword","validate","newErrors","trim","test","handleSubmit","e","preventDefault","validationErrors","Object","keys","length","alert","handleChange","name","value","type","checked","target","children","className","onSubmit","label","required","map","index","Group","controlId","Label","style","color","fileName","_jsxFileName","lineNumber","columnNumber","Control","onChange","placeholder","toLowerCase","borderColor","borderWidth","Text","position","paddingRight","onClick","top","right","transform","cursor","fontSize","title","as","rows","xs","Check","_c","$RefreshReg$"],"sources":["H:/drift mark tecknology internship day 1/company website drift mark task 5/my task/my-app/src/components/ContactForm.js"],"sourcesContent":["\n\n\n\n\n// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n// import \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\n// import \"./ContactForm.css\"; // Import custom styles for animated border\n\n// function ContactForm() {\n//   const initialFormState = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     message: \"\",\n//     isRobot: false,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormState);\n//   const [errors, setErrors] = useState({});\n//   const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n//     if (!formData.email.trim()) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = \"Enter a valid email address.\";\n//     }\n//     if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n//     if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n//     if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const validationErrors = validate();\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//     } else {\n//       setErrors({});\n//       alert(\"Form submitted successfully!\");\n//       setFormData(initialFormState); // Clear the input fields after submission\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: type === \"checkbox\" ? checked : value,\n//     });\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"form-container\">\n//         <Form onSubmit={handleSubmit} >\n//           {/* Input Fields */}\n//           {[\n//             { label: \"First Name\", name: \"firstName\", required: true },\n//             { label: \"Last Name\", name: \"lastName\", required: true },\n//             { label: \"Email\", name: \"email\", required: true },\n//           ].map(({ label, name, required }, index) => (\n//             <Form.Group controlId={name} key={index} className=\"mb-3\">\n//               <Form.Label style={{ color: \"blue\" }}>\n//                 {label} {required && <span style={{ color: \"red\" }}>*</span>}\n//               </Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 name={name}\n//                 value={formData[name]}\n//                 onChange={handleChange}\n//                 placeholder={`Enter ${label.toLowerCase()}`}\n//                 style={{\n//                   borderColor: errors[name] ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                 }}\n//               />\n//               {errors[name] && (\n//                 <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n//               )}\n//             </Form.Group>\n//           ))}\n\n//           {/* Password Field with Eye Icon */}\n//           <Form.Group controlId=\"password\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"blue\" }}>\n//               Password <span style={{ color: \"red\" }}>*</span>\n//             </Form.Label>\n//             <div style={{ position: \"relative\" }}>\n//               <Form.Control\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter password\"\n//                 style={{\n//                   borderColor: errors.password ? \"red\" : \"skyblue\",\n//                   borderWidth: \"2px\",\n//                   paddingRight: \"40px\", // Extra space for the icon\n//                 }}\n//               />\n//               <i\n//                 className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n//                 onClick={() => setShowPassword(!showPassword)}\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"50%\",\n//                   right: \"10px\",\n//                   transform: \"translateY(-50%)\",\n//                   cursor: \"pointer\",\n//                   fontSize: \"1.2rem\",\n//                   color: \"gray\",\n//                 }}\n//                 title={showPassword ? \"Hide Password\" : \"Show Password\"}\n//               />\n//             </div>\n//             {errors.password && (\n//               <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Message Field */}\n//           <Form.Group controlId=\"message\" className=\"mb-3\">\n//             <Form.Label style={{ color: \"vilot\" }}>\n//               Message (Optional)\n//             </Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               name=\"message\"\n//               value={formData.message}\n//               onChange={handleChange}\n//               placeholder=\"Enter your message\"\n//               style={{\n//                 borderColor: errors.message ? \"red\" : \"skyblue\",\n//                 borderWidth: \"2px\",\n//               }}\n//             />\n//             {errors.message && (\n//               <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* \"I am not a robot\" Section */}\n//           <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n//             <Row className=\"align-items-center\">\n//               <Col xs=\"auto\">\n//                 <Form.Check\n//                   type=\"checkbox\"\n//                   name=\"isRobot\"\n//                   checked={formData.isRobot}\n//                   onChange={handleChange}\n//                   className=\"me-2\"\n//                 />\n//               </Col>\n//               <Col>\n//                 <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n//               </Col>\n//             </Row>\n//             {errors.isRobot && (\n//               <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n//             )}\n//           </Form.Group>\n\n//           {/* Submit Button */}\n//           <Button className=\"btn btn-primary btn-lg\"  type=\"submit\">\n//             Submit\n//           </Button>\n//         </Form>\n//       </div>\n//     </Container>\n//   );\n// }\n\n// export default ContactForm;\n\n\n\nimport React, { useState } from \"react\";\nimport { Form, Button, Container, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\"; // Import Bootstrap Icons\nimport \"./ContactForm.css\"; // Import custom styles for animated border\n// import Contact from \"./Contact\";\n\n\nfunction ContactForm() {\n  const initialFormState = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    message: \"\",\n    isRobot: false,\n  };\n\n  const [formData, setFormData] = useState(initialFormState);\n  const [errors, setErrors] = useState({});\n  const [showPassword, setShowPassword] = useState(false); // State to toggle password visibility\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.firstName.trim()) newErrors.firstName = \"First name is required.\";\n    if (!formData.email.trim()) {\n      newErrors.email = \"Email is required.\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Enter a valid email address.\";\n    }\n    if (!formData.password.trim()) newErrors.password = \"Password is required.\";\n    if (!formData.lastName.trim()) newErrors.lastName = \"LastName is required.\";\n    if (!formData.isRobot) newErrors.isRobot = \"You must confirm you are not a robot.\";\n    return newErrors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const validationErrors = validate();\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n    } else {\n      setErrors({});\n      alert(\"Form submitted successfully!\");\n      setFormData(initialFormState); // Clear the input fields after submission\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n\n  return (\n    <Container>\n      <div className=\"form-container\">\n        <Form onSubmit={handleSubmit}>\n          {/* Input Fields */}\n          {[\n            { label: \"First Name\", name: \"firstName\", required: true },\n            { label: \"Last Name\", name: \"lastName\", required: true },\n            { label: \"Email\", name: \"email\", required: true },\n          ].map(({ label, name, required }, index) => (\n            <Form.Group controlId={name} key={index} className=\"mb-3\">\n              <Form.Label style={{ color: \"blue\" }}>\n                {label} {required && <span style={{ color: \"red\" }}>*</span>}\n              </Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={name}\n                value={formData[name]}\n                onChange={handleChange}\n                placeholder={`Enter ${label.toLowerCase()}`}\n                style={{\n                  borderColor: errors[name] ? \"red\" : \"skyblue\",\n                  borderWidth: \"2px\",\n                }}\n              />\n              {errors[name] && (\n                <Form.Text className=\"text-danger\">{errors[name]}</Form.Text>\n              )}\n            </Form.Group>\n          ))}\n\n          {/* Password Field with Eye Icon */}\n          <Form.Group controlId=\"password\" className=\"mb-3\">\n            <Form.Label style={{ color: \"blue\" }}>\n              Password <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <div style={{ position: \"relative\" }}>\n              <Form.Control\n                type={showPassword ? \"text\" : \"password\"}\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                placeholder=\"Enter password\"\n                style={{\n                  borderColor: errors.password ? \"red\" : \"skyblue\",\n                  borderWidth: \"2px\",\n                  paddingRight: \"40px\", // Extra space for the icon\n                }}\n              />\n              <i\n                className={`bi ${showPassword ? \"bi-eye-fill\" : \"bi-eye-slash-fill\"}`}\n                onClick={() => setShowPassword(!showPassword)}\n                style={{\n                  position: \"absolute\",\n                  top: \"50%\",\n                  right: \"10px\",\n                  transform: \"translateY(-50%)\",\n                  cursor: \"pointer\",\n                  fontSize: \"1.2rem\",\n                  color: \"gray\",\n                }}\n                title={showPassword ? \"Hide Password\" : \"Show Password\"}\n              />\n            </div>\n            {errors.password && (\n              <Form.Text className=\"text-danger\">{errors.password}</Form.Text>\n            )}\n          </Form.Group>\n\n          {/* Message Field */}\n          <Form.Group controlId=\"message\" className=\"mb-3\">\n            <Form.Label style={{ color: \"blue\" }}>\n              Message (Optional)\n            </Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={3}\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              placeholder=\"Enter your message\"\n              style={{\n                borderColor: errors.message ? \"red\" : \"skyblue\",\n                borderWidth: \"2px\",\n              }}\n            />\n            {errors.message && (\n              <Form.Text className=\"text-danger\">{errors.message}</Form.Text>\n            )}\n          </Form.Group>\n\n          {/* \"I am not a robot\" Section */}\n          <Form.Group controlId=\"robotCheck\" className=\"mb-4\">\n            <Row className=\"align-items-center\">\n              <Col xs=\"auto\">\n                <Form.Check\n                  type=\"checkbox\"\n                  name=\"isRobot\"\n                  checked={formData.isRobot}\n                  onChange={handleChange}\n                  className=\"me-2\"\n                />\n              </Col>\n              <Col>\n                <Form.Label className=\"mb-0\">I am not a robot</Form.Label>\n              </Col>\n            </Row>\n            {errors.isRobot && (\n              <Form.Text className=\"text-danger\">{errors.isRobot}</Form.Text>\n            )}\n          </Form.Group>\n\n          {/* Submit Button */}\n          <Button className=\"btn btn-primary btn-lg\" type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n      </div>  \n    </Container>\n  );\n}\n\nexport default ContactForm;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}